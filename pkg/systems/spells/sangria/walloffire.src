use os;
use uo;
use util;
use cliloc;

include ":magery:spells";
include ":magery:fields";
include ":attributes:attributes";
include "include/say";

program wall_of_fire( parms )
  var caster := parms[1];
  var info := parms[2];
  var cast_on := MS_TargetCoordinates(caster, info.targ, "Selecione o alvo.");
    if (!cast_on) // If no cast_on then get cast_on from parms[4]. Used mostly for NPC casting.
        cast_on := parms[4];
    endif
    if (!cast_on)
        SendSysMessageEx(caster, "Voce cancelou.", SSM_FAIL);
        return 0;
    endif
  if ( !CheckLosAt(caster, cast_on.x, cast_on.y, cast_on.z) )
        SendSysMessageEx(caster, "Voce nao enxerga o alvo.", SSM_FAIL);
        return 0;
  endif

	var objtype;
	var direction := GetDirectionByFacing(caster);
	case ( direction )
		FIELD_SHAPE_HORIZONTAL: objtype := "FireFieldEW"; break;
		FIELD_SHAPE_VERTICAL: objtype := "FireFieldNS"; break;
	endcase

	// Duration: (3 + (Magery * 0.4)) seconds
	var duration := CInt(3 + AP_GetSkill(caster, MAGICLORE) * 0.4);
	// Level is the same as Poison spell
	var area_size := GetConfigInt(info.spell_config, "AreaSize");

	var coordinates := GetCoordinatesForField(cast_on.x, cast_on.y, direction, CInt(area_size/2));
	foreach coord in ( coordinates )
		var cast_on_z := cast_on.z;
		var standing_z := struct;
		standing_z := GetStandingHeight(coord.x, coord.y, cast_on.z, caster.realm);
		if ( cast_on_z < standing_z )
			cast_on_z := GetStandingHeight(coord.x, coord.y, cast_on.z, caster.realm);
		endif

		if ( CheckLosAt(caster, coord.x, coord.y, cast_on_z ) )
			continue; // Only create a field piece if the caster has line of sight.
		endif
		var item := CreateItemAtLocation(coord.x, coord.y, cast_on_z.z, objtype, 1, caster.realm);
		if ( item.errortext )
			SendSysMessage(caster, "Error - "+item.errortext);
			continue;
		endif

		SetObjProperty(item, "SummonedField", caster.serial);
        SetObjProperty(item, "DamageDice", "4d6");
		item.SetOwner(caster);
		item.SetDuration(duration);
		SleepMS(2);
	endforeach

	return 1;
endprogram
