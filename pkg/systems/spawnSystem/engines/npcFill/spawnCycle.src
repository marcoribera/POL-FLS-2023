/*

	spawnSystem originally created by Austin for the 0.97 Distro

	Bugs fixed by Edwards

	Adapted for the Basic Distro by Yukiko 10-Sep-2015


*/
use uo;
use os;

include ":attributes:attributes";
include ":spawnsystem:groups";
include ":spawnsystem:regions";
include ":spawnsystem:settings";
include ":spawnsystem:spawnerUtil";

program SpawnCycle( params )

	//var engine_name	:= params[1];
	var realm_name	:= params[2];
	var region_name	:= params[3];
	var group_name	:= params[4];
	params := 0; // Not needed anymore.

	ValidateSpawns( region_name, group_name );

	var group_settings := SS_GetGroupInRegion( region_name, group_name ),
	    max_amt := CInt( group_settings.max_amt ),
	    cur_amount := CInt( SS_GetSpawnsInRegionGroup( region_name, group_name ).Size() );

	if( CInt( group_settings.enabled ) != 1 )
		return 0;
	elseif( cur_amount >= max_amt )
		return 0;
	endif

	var cfg_file := SS_GetSettingsCfgFile(),
		glob_settings := SS_GetSettingsCfgElem( cfg_file, "Globals" ),
		num_retries := CInt( glob_settings.SpawnRetries ),
		spawn_coords := struct;

	if( !num_retries )
		num_retries := 10;
	endif

	var coords := SS_GetRegionCoordinates( region_name ),
		must_check := 1,
		i;

	for( i:=0; i<=num_retries; i+=1 )
		spawn_coords := SS_GetSpawnCoords( coords, realm_name );
		if( SS_NPCValidLocation( spawn_coords ))
			must_check := 0;
			break;
		endif
		SleepMS(10);
	endfor

	if( must_check )
		// var must_check saves a lot of process for this check...
		if( !SS_NPCValidLocation( spawn_coords ))
			SysLog( "Error: Unable to get coords in region " + region_name + " for spawning." );
			return 0;
		endif
	endif

	var group_entries := SS_GetEntriesInGroup( group_name ).Keys(),
	    spawn_object := group_entries.RandomEntry();

	// var near := ListMobilesNearLocation( spawn_coords.x, spawn_coords.y, spawn_coords.z, 3, realm_name );
	// Do not spawn an NPC with unconcealed, hidden or ghost players nearby. Only spawn if a player is concealed.
	var near := ListMobilesNearLocationEx( spawn_coords.x, spawn_coords.y, spawn_coords.z, 3, LISTEX_FLAG_NORMAL + LISTEX_FLAG_HIDDEN + LISTEX_FLAG_GHOST, realm_name );
	if( !near.Size() )
		var created := CreateNPCFromTemplate( spawn_object, spawn_coords.x, spawn_coords.y, spawn_coords.z, 0, realm_name );
		if( created.errortext )
			// The following line was probably left in for debugging. I am commenting it
			// out but leaving it in just in case it is needed later.
			// SysLog( "Error: Unable to create " + spawn_object + " from group " + group_name + " in region " + region_name + ". ->"+created.errortext );
			return 0;
		endif

		SS_AddSpawnToRegion( region_name, group_name, created );
		AlterNPCModification( region_name, created );
	endif

	return 1;
endprogram

function ValidateSpawns( region_name, group_name )

	var spawns := SS_GetSpawnsInRegionGroup( region_name, group_name );

	foreach serial in ( spawns.Keys() )
		SleepMS(10);

		var object := SystemFindObjectBySerial( serial );
		if( object.IsA( POLCLASS_NPC ))
			continue;
		endif

		SS_RemoveSpawnFromRegion( region_name, group_name, serial );

		SleepMS(10);
	endforeach

	return 1;
endfunction

function AlterNPCModification( region_name, creature )

        var region_difficulty := CDbl( SS_GetRegionDifficulty( region_name ));

        var ar_mod := CInt( creature.ar );
        if( !ar_mod )
			creature.ar_mod := CInt( region_difficulty * 100 );
        else
			creature.ar_mod := CInt( ar_mod * ( 1 + region_difficulty ));
        endif

        SetObjProperty(creature, "#FortitudeMod", 10 * region_difficulty);
        SetObjProperty(creature, "#ReflexosMod", 10 * region_difficulty);
        SetObjProperty(creature, "#VontadeMod", 10 * region_difficulty);
	return 1;
endfunction
