use uo;
use os;
use cfgfile;
use util;
use vitals;

include "include/client";
include ":attributes:attributes";
include ":gumps:requestgump";
include ":gumps:gumps";
include ":tn:tngumps";
include "include/damage";
include ":timedscripts:timedScripts";
include ":traps:traps";
include ":tn:lever";

function ConstructGump(item)
   var opts := item.GetLeverOpts();
   var gump := GFCreateGump();
	GFSetID(gump, 0x597);
	GFPage(gump, 0);
	GFResizePic(gump, 0, 0, 9200, 480, 395);
   GFTextLine(gump, 165, 20, 900, "Alavancas");
   GFPage(gump, 1);

   var y := 48;
   GFTextLine(gump, 45, y, 560, "Testar");
   GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 99);
   if (!opts.is_linked)
      y += 20;
      GFTextLine(gump, 45, y, _ifElse(opts.doorstatus, 520, 500), "Trancar/destrancar porta");
      GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 2);
      y += 20;
      GFTextLine(gump, 45, y, _ifElse(opts.opendoors, 520, 500), "Abrir/Fechar porta");
      GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 102);
      y += 20;
      GFTextLine(gump, 45, y, _ifElse(opts.moveitems, 520, 500), "Mover objetos");
      GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 101);
      y += 20;
      GFTextLine(gump, 45, y, _ifElse(opts.teleport_to, 520, 500), "Spawnar NPC");
      GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 5);
   endif
   
   y += 20;
   GFTextLine(gump, 45, y, _ifElse(opts.graphicarrays, 520, 500), "Mudar grafico da alavanca");
   GFAddButton(gump, 25, y+2, 2117, 2118, GF_PAGE_BTN, 2);
   y += 20;
   GFTextLine(gump, 45, y, _ifElse(GetObjProperty(item, "HaveTrap"), 520, 500), "Adicionar armadilhas");
   GFAddButton(gump, 25, y+2, 2117, 2118, GF_PAGE_BTN, 4);
   y += 20;
   GFTextLine(gump, 45, y, _ifElse(GetObjProperty(item, "level"), 520, 500), "Esconder Alavanca");
   GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 100);
   y += 20;
   GFTextLine(gump, 45, y, _ifElse(GetObjProperty(item, "powerword"), 520, 500), "Esconder Alavanca e revelar por fala");
   GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 9);
   y += 20;
   GFTextLine(gump, 45, y, _ifELse(opts.ontext, 520, 500), "Mudar on/off texto");
   GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 97);
   if (!opts.is_linked)
      y += 20;
      GFTextLine(gump, 45, y, _ifElse(opts.linked_to, 520, 500), "Linkar outras alavancas");
      GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 3);
   endif
   y += 20;
   GFTextLine(gump, 45, y, _ifElse(opts.linked_to || opts.is_linked, 520, 500), "Unlink alavancas");
   GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 6);
   y += 20;
   GFTextLine(gump, 45, y, _ifElse(opts.walkon, 520, 500), "Ativar ao andar por cima");
   GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 7);
   y += 20;
   GFTextLine(gump, 45, y, _ifElse(GetObjProperty(item, "status") == "on", 520, 500), "Resetar agora");
   GFAddButton(gump, 25, y+2, 2117, 2118, GF_CLOSE_BTN, 8);

   GFPage(gump, 2);
   GFTextLine(gump, 145, 50, 900, "Escolha o grafico da alavanca");

   GFTilePic(gump, 105, 120, 4237);
   GFAddButton(gump, 85, 130, 210, 211, GF_CLOSE_BTN, 20);
   GFTilePic(gump, 355, 120, 4244);
   GFAddButton(gump, 345, 130, 210, 211, GF_CLOSE_BTN, 21);
   GFTilePic(gump, 105, 270, 4240);
   GFAddButton(gump, 85, 270, 210, 211, GF_CLOSE_BTN, 22);
   GFTilePic(gump, 355, 270, 4241);
   GFAddButton(gump, 345, 270, 210, 211, GF_CLOSE_BTN, 23);

   GFAddButton(gump, 45, 350, 2453, 2454, GF_PAGE_BTN, 1);
   
   GFPage(gump, 3);
   GFPage(gump, 4);
   GFTextLine(gump, 145, 50, 900, "Escolha a armadilha da alavanca");
   
   GFTilePic(gump, 105, 120, 4347);
   GFTilePic(gump, 355, 120, 4414);
   GFTilePic(gump, 105, 270, 4401);
   GFTilePic(gump, 355, 270, 8128);
   
   GFAddButton(gump, 85, 130, 210, 211, GF_CLOSE_BTN, 15);
   GFAddButton(gump, 345, 130, 210, 211, GF_CLOSE_BTN, 16);
   GFAddButton(gump, 85, 270, 210, 211, GF_CLOSE_BTN, 17);
   GFAddButton(gump, 345, 270, 210, 211, GF_CLOSE_BTN, 18);
   GFAddButton(gump, 45, 350, 2453, 2454, GF_PAGE_BTN, 1);

   return gump;
endfunction

program lever(who, item)
   _resolveParams(who, item);
   if ( !ReserveItem(item) || GetObjProperty(item, "#inuse") == 1 )
      SendSysMessage(who, "O item esta em uso.");
      return;
   endif

   if(who.cmdlevel > 2)
      var gump := ConstructGump(item);
      var res  := GFSendGump(who, gump);

      var trapstrength := CInt(GetObjProperty(item,"trap_strength"));
      if (!trapstrength) trapstrength := 2; endif

      case(res[0])
         2: doorstatus(who, item);
         3: bindlevers(who, item);
         4: bindlights(who, item);
         5: linkteleport(who, item);
         6: unbindlevers(who, item);
         7: togglewalkon(who, item);
         8: reset(item, 1);
         9: setPowerEvent(who, item);
         
         15: 
            SetObjProperty(item, "HaveTrap", "Explosion");
            AddTrap(item, "Explosion", trapstrength);
         16: 
            SetObjProperty(item, "HaveTrap", "PoisonGas");
            AddTrap(item, "PoisonGas", trapstrength);
         17: 
            SetObjProperty(item, "HaveTrap", "Needle");
            AddTrap(item, "Needle", trapstrength);
         18: 
            SetObjProperty(item, "HaveTrap", "Magic");
            AddTrap(item, "Magic", trapstrength);
         
         20: item.graphic := 0x108e;           // graphic 1
            item.name    := "alavanca";
         21: item.graphic := 0x1095;           // graphic 2
            item.name    := "alavanca";
         22: item.graphic := 0x108f;           // graphic 3
            item.name    := "interruptor";
         23: item.graphic := 0x1092;           // graphic 4
            item.name    := "interruptor";
         24: setprp(who, item);           // setobjproperty()
         98: changegraphic(who, item);
         97: setOnofftext(who, item);
         99: normalusage(who, item);           // use item like normal
         100: setHiding(who, item);
         101: setMoveObject(who, item);
         102: setOpenDoor(who, item);
      endcase
      return;
   endif

   normalusage(who, item);
endprogram

function setMoveObject(who, item)
   var opts := item.GetLeverOpts();

   SendSysMessageEx(who, "Escolha o que voce deseja mover.");
   var trg;
   var newarray := array{};
   while(1 && who.connected)
      trg := Target(who);
      if(!trg)
         break;
      endif
      newarray.append(trg.serial);
      sleepms(2);
      SendSysMessageEx(who, "Conectado", SSM_INFO);
   endwhile

   if (!newarray.size()) return; endif
   if (!opts.movefinal) opts.movefinal := array{0, 0, 1}; endif
   if (!opts.movetime) opts.movetime := 15; endif

   var input_list := array{};
   input_list.append(struct{ "title" := "Quantas vezes sera repetido o movimento?", "marked" := ""+cint(opts.movetime) });
   input_list.append(struct{ "title" := "Qual posicaoo sera movida? (+x +y +z)", "marked" := " ".join(opts.movefinal) });
   var output := QuestionsGump(who, input_list);
   if (!output)
      return;
   elseif (SplitWords(output[2]).size() < 3)
      return;
   endif

   opts.moveitems := newarray;
   opts.movetime := cint(output[1]);
   opts.movefinal := SplitWords(output[2]);

   EraseObjProperty(item, "moveinital");
   item.setLeverOpts(opts);
endfunction

function setHiding(who, item)
	var dif := Cint(RadioGump(who, 0, 0, "Qual o level do interruptor?", array{"1", "2", "3", "4", "5", "Remover"}, 0, 1));
   if (!dif) 
      EraseObjProperty(item, "level"); 
      item.invisible := 0;
      return;
   endif

	SetObjProperty(item, "level", dif);
	item.invisible := 1;
endfunction

function setPowerEvent(who, item)
   var powerword := GetObjProperty(item, "powerword");
   //if (!powerword) powerword := ""; endif

   var input_list := array{};
   input_list.append(struct{ "title" := "Qual frase ira revelar a alavanca? (em branco para remover)", "marked" := powerword });
   var output := QuestionsGump(who, input_list);
   if (!output)
      return;
   endif

   if (!output[1])
      EraseObjProperty(item, "powerword");
      if (!GetObjProperty(item, "level"))
         item.invisible := 1;
      endif
   else
      item.invisible := 1;
      SetObjProperty(item, "powerword", lower(output[1]));
   endif

   SendSysMessageEx(who, "Frase para revelar alavanca adicionado", SSM_INFO);
endfunction

function changegraphic(who, item)
   var opts := item.GetLeverOpts();
   var newarray := array{};
   SendSysMessage(who,"Escolha os itens que quer adicionar. esc para terminar.");
   var trg;
   while(1)
      trg := Target(who);
      if(!trg)
         break;
      endif
      SetObjProperty(trg, "switched", 1);
      SetObjProperty(trg, "originalgraphic", trg.graphic);
      newarray.append(trg.serial);
   endwhile

   if (!newarray.size()) return; endif

   var graphic := Cint(RequestGump(who, "Para que grafico os itens devem mudar?."));
   opts.graphicto := graphic;
   opts.graphicarrays := newarray;

   item.setLeverOpts(opts);
   SendSysMessageEx(who,"Os objetos foram ligados a alavanca.");
endfunction

function setOpenDoor(who, item)
   var opts := item.GetLeverOpts();
   var newarray := array{};
   SendSysMessageEx(who,"Escolha a porta que voce deseja linkar com esta alavanca. Esc para cancelar");
   var trg;
   while(1)
         trg := Target(who);
         if(!trg)
            break;
         elseif (!trg.isDoor())
            SendSysMessageEx(who, "Isso nao e uma porta", SSM_FAIL);
            continue;
         endif
         newarray.append(trg.serial);
         trg.locked := 1;
         SendSysMessageEx(who,"Porta conectada.");
   endwhile
   if (!newarray.size()) return; endif

   opts.opendoors := newarray;

   item.setLeverOpts(opts);
   SendSysMessageEx(who,"A alavanca foi ligada com as porta(s)");
endfunction

function setprp(who, item)
   var opts := item.GetLeverOpts();


   item.setLeverOpts(opts);

   SendSysMessageEx(who,"As proprieades foram ligadas a alavanca");
endfunction


function setOnofftext(who, item)
   var opts := item.GetLeverOpts();
   
   if (!opts.ontext) opts.ontext := ""; endif

   var input_list := array{};
   input_list.append(struct{ "title" := "Qual frase sera enviada quando alavanca for ativada?", "marked" := opts.ontext });
   var output := QuestionsGump(who, input_list);
   if (!output)
      return;
   endif

   if (!output[1])
      opts.-"ontext";
   else
      opts.ontext := output[1];
   endif

   item.setLeverOpts(opts);
   SendSysMessageEx(who, "Frase de acionamento adicionado", SSM_INFO);
endfunction

function linkteleport(who, item)
   var opts := item.GetLeverOpts();

   var input_list := array{};
   input_list.append(struct{ "title" := "Qual NPC sera spawnado?", "marked" := opts.teleport_to });
   var output := QuestionsGump(who, input_list);
   if (!output)
      return;
   endif

   if (!output[1])
      opts.-"teleport_to";
   else
      opts.teleport_to := output[1];
   endif

   item.setLeverOpts(opts);
   SendSysMessageEx(who,"O monstro sera invocado quando ativado");
endfunction

function doorstatus(who, item)
   var opts := item.GetLeverOpts();
   var newarray := array{};
   SendSysMessageEx(who,"Escolha a porta que voce deseja linkar com esta alavanca. Esc para cancelar", SSM_REQUEST);
   var trg;
   while(1)
      trg := Target(who);
      if(!trg)
         break;
      elseif (!trg.isDoor())
         SendSysMessageEx(who, "Isso nao e uma porta", SSM_FAIL);
         continue;
      endif
      newarray.append(trg.serial);
   endwhile

   if (!newarray.size()) return; endif

   opts.doorstatus := newarray;
   item.setLeverOpts(opts);

   SendSysMessageEx(who,"As portas foram ligadas a alavanca");
endfunction

function bindlights(who, item)
   var opts := item.GetLeverOpts();
   var newarray := array{};
   SendSysMessageEx(who,"Escolha as luzes que voce deseja linkar com esta alavanca. Esc para cancelar", SSM_REQUEST);
   var trg;
   while(1)
      trg := Target(who);
      if(!trg)
         break;
      endif
      newarray.append(trg.serial);
       SetObjProperty(trg,"switched", 1);
      SendSysMessageEx(who,"Luz conectada.");
   endwhile

   if (!newarray.size()) return; endif

   opts.lights := newarray;
   item.setLeverOpts(opts);

   SendSysMessageEx(who,"As luzes foram ligadas a alavanca");
endfunction

function bindlevers(who, item)
   var opts := item.GetLeverOpts();
   SendSysMessageEx(who,"Escolha as alavancas que voce deseja linkar com esta alavanca. Esc para cancelar", SSM_REQUEST);
   SendSysMessageEx(who,"As alavancas escolhidas perderao suas proprieades e funcionarao", SSM_INFO);
   SendSysMessageEx(who,"em conjunto com esta alavanca", SSM_INFO);
   var trg;
   var newarray := array{};
   while(1)
      trg := Target(who);
      if(!trg)
         break;
      elseif (trg.objtype != 0x108c)
         SendSysMessageEx(who,"Isso nao e uma alavanca.");
         continue;
      endif

      newarray.append(trg.serial);
      SetObjProperty(item, "switched", 0);
      trg.setLeverOpts(struct{ "is_linked" := item.serial });
      SendSysMessageEx(who,"Alavanca conectada.");
   endwhile

   if (!newarray.size()) return; endif

   opts.linked_to := newarray;
   var input_list := array{};
   input_list.append(struct{ "title" := "Todas as alavancas devem ser acionadas?", "marked" := cint(opts.all_levers)+1, "radio" := array{"N�o", "Sim"} });
   input_list.append(struct{ "title" := "Precisam ordem para serem acionadas (random)?", "marked" := cint(opts.all_levers_order)+1, "radio" := array{"N�o", "Sim"} });
   var output := QuestionsGump(who, input_list);
   if (!output)
      return;
   endif

   opts.all_levers := cint(output[1] == "Sim");
   opts.all_levers_order := cint(output[2] == "Sim");

   item.setLeverOpts(opts);
   if (opts.all_levers_order)
      SetRandomOrder(item);
   else
      EraseObjProperty(item, "leverorder");
   endif
   SendSysMessageEx(who,"As alavancas foram ligadas a esta alavancas");
endfunction

function unbindlevers(who, item)
   var opts := item.GetLeverOpts();
   if (opts.linked_to)
      foreach item in (opts.linked_to)
         item := SystemFindObjectBySerial(item);
         item.SetLeverOpts(struct{});
         sleepms(2);
      endforeach
      opts.-"linked_to";
      item.setLeverOpts(opts);
   elseif (opts.is_linked)
      var origin_lever := SystemFindObjectBySerial(opts.is_linked);
      var origin_props := origin_lever.GetLeverOpts();
      if (origin_props.linked_to)
         var index := FindInArray(origin_props.linked_to, item.serial);
         if (index)
            origin_props.linked_to.Erase(index);
            if (!origin_props.linked_to.size())
               origin_props.-"linked_to";
            endif
            origin_lever.setLeverOpts(origin_props);
         endif
         SetRandomorder(origin_lever);
      endif
      opts.-"is_linked";
      item.setLeverOpts(opts);
   endif
endfunction

function togglewalkon(who, item)
   var opts := item.GetLeverOpts();
   if (opts.walkon)
      item.invisible:=0;
      item.graphic:= 0x108e;
      SendSysMessageEx(who, "O item nao sera mais ativado ao andar por cima", SSM_FAIL);
      opts.-"walkon";
   else
      item.graphic:= 4010;
      SendSysMessageEx(who, "O item sera ativado ao andar por cima", SSM_INFO);
      item.movable := 0;
      item.invisible:=1;
      opts.walkon := 1;
   endif
   item.setLeverOpts(opts);
endfunction