use os;
use uo;

/*include "include/client";
include "include/objtype";
include "util/key";*/
include "plankUtil";
include ":keys:key";

const DIR_N             :=  0x00;   // North.
const DIR_NE            :=  0x01;   // Northeast.
const DIR_E             :=  0x02;   // East.
const DIR_SE            :=  0x03;   // Southeast.
const DIR_S             :=  0x04;   // South.
const DIR_SW            :=  0x05;   // Southwest.
const DIR_W             :=  0x06;   // West.
const DIR_NW            :=  0x07;   // Northwest.

/*
 * the searchoffset matrix is for an east-facing plank.
 * these will have to be rotated for the other positions
 *   P is the plank, N is where you can't step (otherwise
 *    this teleportation stuff wouldn't be necessary)
 *
 *        13 12 11
 *        14  5  4
 *        15  6  2
 *        16  7  1 N P
 *        17  8  3
 *        18  9 10
 *        19 20 21
 *
 */

var searchoffset := array{
   array{ -2,  0 },          //  1
   array{ -2, -1 },
   array{ -2, +1 },
   array{ -2, -2 },
   array{ -3, -2 },          //  5
   array{ -3, -1 },
   array{ -3,  0 },
   array{ -3, +1 },
   array{ -3, +2 },
   array{ -2, +2 },          // 10
   array{ -2, -3 },
   array{ -3, -3 },
   array{ -4, -3 },
   array{ -4, -2 },
   array{ -4, -1 },          // 15
   array{ -4,  0 },
   array{ -4, +1 },
   array{ -4, +2 },
   array{ -4, +3 },
   array{ -3, +3 },          // 20
   array{ -2, +3 },
   array{ -5,  0 },
   array{ -5, +2 },
   array{ -5, +3 },
   array{ -5, +4 },
   array{ -4, +4 },          // 20
   array{ -3, +4 },
   array{ -6,  0 },
   array{ -6, +3 },
   array{ -6, +4 },
   array{ -6, +5 },
   array{ -5, +5 },          // 20
   array{ -4, +5 }
};

program plankwalk( who, plank, lastx, lasty, lastz )
 /*   if (!KP_HasKeyForLock(who.backpack, plank))
        if (plank.locked)
            var sh := GetStandingHeight( lastx, lasty, lastz );
            if (!sh || !sh.multi || sh.multi.serial != plank.multi.serial)
                MoveObjectToLocation( who, lastx, lasty, lastz, plank.realm, MOVEOBJECT_FORCELOCATION );
                return;
            endif
        endif
    endif*/

    if (ListMobilesNearLocation( plank.x, plank.y, plank.z, 0 ).size() > 1)
        MoveObjectToLocation( who, lastx, lasty, lastz, plank.realm, MOVEOBJECT_FORCELOCATION );
        return;
    endif

    var xidx, yidx, xmul, ymul;

    case (plank.graphic)
        GID_PLANK_EXTENDED_FACING_WEST:
            if (! (who.facing in array{ DIR_W, DIR_NW, DIR_SW }))
                return;
            endif
            xidx := 1;
            yidx := 2;
            xmul := 1;
            ymul := 1;

        GID_PLANK_EXTENDED_FACING_EAST:
            if (! (who.facing in array{ DIR_E, DIR_NE, DIR_SE }))
                return;
            endif
            xidx := 1;
            yidx := 2;
            xmul := -1; // flip across x-axis
            ymul := 1;

        GID_PLANK_EXTENDED_FACING_NORTH:
            if (! (who.facing in array{ DIR_N, DIR_NE, DIR_NW }))
                return;
            endif
            xidx := 2;
            yidx := 1;
            xmul := 1;
            ymul := +1;

        GID_PLANK_EXTENDED_FACING_SOUTH:
            if (! (who.facing in array{ DIR_S, DIR_SE, DIR_SW }))
                return;
            endif
            xidx := 2;
            yidx := 1;
            xmul := 1;
            ymul := -1; // flip across y-axis

        default:
            return;
    endcase
    if (CanMove( who,
                 searchoffset[1][xidx] * xmul / 2,
                 searchoffset[1][yidx] * ymul / 2 ))
        return;                     // doesn't need our help!
    endif


    foreach offset in searchoffset
        if (TryMove( who, offset[xidx] * xmul, offset[yidx] * ymul ))
            return;
        endif
    endforeach
endprogram

function TryMove( who, dx, dy )
    var res := 0;
    set_critical( 1 );

    var tryx := who.x + dx;
    var tryy := who.y + dy;
    var h := GetStandingHeight( tryx, tryy, who.z );
    if (h && (not h.multi)) // CHECKME should check line of sight?
        MoveObjectToLocation( who, tryx, tryy, h.z, who.realm );
        res := 1;
    endif

    set_critical(0);
    return res;
endfunction

function CanMove( who, dx, dy )
    var tryx := who.x + dx;
    var tryy := who.y + dy;
    var h := GetStandingHeight( tryx, tryy, who.z );
    if (h)
        return 1;
    else
        return 0;
    endif
endfunction