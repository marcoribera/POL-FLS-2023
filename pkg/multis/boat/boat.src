////////////////
//	boat.src 
//
//	control script for boats
//
//	Header replaced by Racalac 9/15/02
//
//	Todo/Fix: Course nav needs the "goto #" command implimented.
//			  Tillerman string recognition causes boat to pause
////////////////

use os;
use uo;
use util;
use boat;

/*include "include/eventID";
include "include/sysEvent";
include "include/myUtil";
include "include/client";
include "include/yesNo";
include "include/math";
*/
include "plankUtil";
include "include/sysEvent";
include ":gumps:yesno";
include ":keys:key";

const STATE_STATIONARY := 0;
const STATE_MOVING := 1;
const STATE_DRIFTING := 2;
const STATE_FOLLOWING_COURSE := 3; //NOTE NEW STATE
const DELAY_DRIFTING := 15000;

/*NOTE NEW CONSTANTS*/
const NEGONE := -1;
const ZERO := 0;
const POSONE := 1;

var state := STATE_STATIONARY;
var relative_direction;
var ms_delay_between_moves := 200;
var boat;
var tillerman;
var owner := GetObjProperty(boat.hold,"owner");

/*NOTE NEW GLOBAL*/
var first_move_toward_waypoint := 1;

program autostart_boat(param)
  boat := param;
  if(!boat)
    syslog( "[ERROR] [boat.src] Boat script running, but boat not found!" );
    return;
  endif
  
  tillerman := boat.tillerman;
  if(!tillerman)
    syslog( "[ERROR] [boat.src] No tillerman for boat at: " +(boat.x-1) +","+ boat.y +","+ boat.z + "; destroying the boat..." );
    DestroyMulti(boat);
    return;
  endif
  
  EnableEvents(SYSEVENT_SPEECH, 15);
  RegisterForSpeechEvents(tillerman, 15);
  var nextencounter := ReadGameClock()+(RandomInt(120) + 120);
  var nextsound := ReadGameClock()+5;
  var driftcounter := 1;
  //set_critical(1);
  var x,y;
  
  while(boat)
    if(GetObjProperty(boat.hold, "#speed"))
      state := STATE_MOVING;
      ms_delay_between_moves := GetObjProperty(boat.hold, "#speed"); 
      relative_direction := GetObjProperty(boat.hold, "#relativedir");
      eraseobjproperty(boat.hold, "#speed");
      eraseobjproperty(boat.hold, "#relativedir");    
    endif     

    case(state)
      STATE_MOVING:   if(ReadGameClock() > nextsound)
                        PlayBoatSounds();
                        nextsound := ReadGameClock()+5;
                      endif
                      x := boat.x;
                      y := boat.y;
                      MoveBoatRelative(boat, relative_direction);
                      if(boat.x == 6 or boat.x == 5097 or boat.y == 6 or boat.y == 4089)   
                        WorldWrap();
                      endif
                      if((x == boat.x) &&(y == boat.y))
                        ms_delay_between_moves := 1000;
                        state := STATE_DRIFTING;
                        PrintTextAbove(tillerman, "Aargh!! Se continuarmos bateremos em algo!");
                        //SmackEveryone();
                      endif
                      sleepms(ms_delay_between_moves);
                      if(ReadGameClock() > nextencounter)
                        DoEncounter();
                        nextencounter := ReadGameClock()+120;
                      endif
                      while(events_waiting())
                        process_event(wait_for_event(0));
                      endwhile
      STATE_DRIFTING:   if(ReadGameClock() > nextsound)
                          PlayBoatSounds();
                          nextsound := ReadGameClock()+5;
                        endif
                        //if(driftcounter > 15)
                         // MoveBoatRelative(boat, RandomInt(8));
                         // driftcounter := 1;
                       // else
                        //  driftcounter := driftcounter + 1;
                       // endif
                        sleepms(1000);
                        while(events_waiting())
                          process_event(wait_for_event(0));
                        endwhile
      STATE_STATIONARY: var ev := wait_for_event(120);
                        if(ev)
                          process_event(ev);
                        endif
/*NOTE NEW BOAT STATE*/
      STATE_FOLLOWING_COURSE:
        		x := boat.x;
        		y := boat.y;
        		BoatFollowCourse(boat);
        				
        		sleepms(ms_delay_between_moves);
                        while(events_waiting())
                          process_event(wait_for_event(0));
                        endwhile
/*END NEW BOAT STATE*/
    endcase
    if(ReadGameClock() > nextencounter)
      checkres();
      nextencounter := ReadGameClock()+120;
    endif
  endwhile
endprogram

function handle_speech(event)
  var text := lower(event.text);
  if(text["drift"] || text["levantar ancora"])
    ms_delay_between_moves := 1000;
    state := STATE_DRIFTING;
    PrintTextAbove(tillerman, "Aye Aye, Capitao!");
  elseif(text["avante"])
    if(state == STATE_STATIONARY)
      PrintTextAbove(tillerman, "O barco esta ancorado, Capitao!");
    else
      PrintTextAbove(tillerman, "Aye Aye, Capitao!");
      state := STATE_MOVING;
      if(text["a bombordo"])
        relative_direction := 7;
      elseif(text["a estibordo"])
        relative_direction := 1;
      else
        relative_direction := 0;
      endif
    endif
  elseif(text["para tras"])
    if(state == STATE_STATIONARY)
      PrintTextAbove(tillerman, "O barco esta ancorado, Capitao!");
    else
      PrintTextAbove(tillerman, "Aye Aye, Capitao!");
      state := STATE_MOVING;
      if(text["a bombordo"])
        relative_direction := 5;
      elseif(text["a estibordo"])
        relative_direction := 3;
      else
        relative_direction := 4;
      endif
    endif
  elseif(text["recolher velas"] || text["parar o barco"] || text["furl"])
    PrintTextAbove(tillerman, "Aye Aye, Capitao!");
    ms_delay_between_moves := 1000;
    state := STATE_DRIFTING;
  elseif(text["jogar ancora"])
    PrintTextAbove(tillerman, "Aye Aye, Capitao! Barco Ancorado!");
    ms_delay_between_moves := 1000;
    state := STATE_STATIONARY;
  elseif(text["virar a estibordo"] || text["starboard"])
    if(state == STATE_STATIONARY)
      PrintTextAbove(tillerman, "O barco esta ancorado, Capitao!");
    else
      PrintTextAbove(tillerman, "Aye Aye, Capitao!");
      TurnBoat(boat, 1);
    endif
  elseif(text["a estibordo"])
    if(state == STATE_STATIONARY)
      PrintTextAbove(tillerman, "O barco esta ancorado, Capitao!");
    else
      PrintTextAbove(tillerman, "Aye Aye, Capitao!");
      state := STATE_MOVING;
      relative_direction := 2;
    endif
  elseif(text["virar a bombordo"] || text["port"])
    if(state == STATE_STATIONARY)
      PrintTextAbove(tillerman, "O barco esta ancorado, Capitao!");
    else
      PrintTextAbove(tillerman, "Aye Aye, Capitao!");
      TurnBoat(boat, 3);
    endif
  elseif(text["a bombordo"])
    if(state == STATE_STATIONARY)
      PrintTextAbove(tillerman, "O barco esta ancorado, Capitao!");
    else
      PrintTextAbove(tillerman, "Aye Aye, Capitao!");
      state := STATE_MOVING;
      relative_direction := 6;
    endif
  elseif(text["come about"] || text["girar o barco"])
    if(state == STATE_STATIONARY)
      PrintTextAbove(tillerman, "O barco esta ancorado, Capitao!");
    else
      PrintTextAbove(tillerman, "Aye Aye, Captain! Girando o Barco!");
      TurnBoat(boat, 2);
      sleep(1);
    endif
/*NEW MAP COURSE COMMANDS*/
    elseif(text["viagem"])
      	PrintTextAbove(tillerman, "Me entregue o bilhete.");   	
      	var map := Target(event.source);
      	//if(!map.isa(POLCLASS_MAP))
	if (GetObjProperty(map, "plots") == error)
      		PrintTextAbove(tillerman, "Eu preciso do seu bilhete!"); 
      	else
      		SetObjProperty(tillerman, "course", GetObjProperty(map, "plots"));
      		SetObjProperty(tillerman, "nextwaypoint", 1);
      		PrintTextAbove(tillerman, "Arr, rota programada."); 
      	endif
    //elseif(text["clear course"])
    //	PrintTextAbove(tillerman, "Arr, course cleared Cap'n.");
    //	EraseObjProperty(tillerman, "course");
    //	EraseObjProperty(tillerman, "nextwaypoint");
    //elseif(text["nav"])
    //	if(state != STATE_FOLLOWING_COURSE)
    //		PrintTextAbove(tillerman, "We are not currently following a course.");
    //	else
    //		PrintTextAbove(tillerman, "We are following our course.");
    //		PrintTextAbove(tillerman, "The next waypoint is #" + GetObjProperty(tillerman,"nextwaypoint"));
    //	endif
    elseif(text["partir"])
    	if( (GetObjProperty(tillerman,"course")==error) || (GetObjProperty(tillerman,"nextwaypoint")==error))
    		//PrintTextAbove(tillerman,"Arr, set course first Cap'n.");
    	else    		
     		state := STATE_FOLLOWING_COURSE;
     		SetObjProperty(tillerman, "nextwaypoint", 1);
    		//PrintTextAbove(tillerman,"Aye, sailing to first waypoint.");
    	endif
    //elseif(text["continue"])
    //	if( (GetObjProperty(tillerman,"course")==error) || (GetObjProperty(tillerman,"nextwaypoint")==error))
    //		PrintTextAbove(tillerman,"Arr, set course first Cap'n.");
    //	else
    //	    state := STATE_FOLLOWING_COURSE;
    //		PrintTextAbove(tillerman,"Aye, moving on.");
    //	endif
  	endif
/*END NEW MAP COURSE COMMANDS*/
  if(text["a toda velocidade"])
    if(state != STATE_STATIONARY)
      PrintTextAbove(tillerman, "Aye Aye, Capitao! A toda velocidade!");
      ms_delay_between_moves := 100;
    endif
  elseif(text["diminuir velocidade"])
    if(state != STATE_STATIONARY)
      PrintTextAbove(tillerman, "Aye Aye, Capitao! ");
      ms_delay_between_moves := 1000;
    endif
  endif
  sleep(1);
  if(text["one"])
    if(state != STATE_STATIONARY)
      MoveBoatRelative(boat, relative_direction);
      state := STATE_STATIONARY;
    endif
  endif
endfunction

function process_event(event)
  if(event.type == SYSEVENT_SPEECH)
    var text := lower(event.text);
    if(CanCommandMe(event.source) || text["partir"]) 
      if(text["drydock"])
        PrintTextAbove(tillerman, "Aye Aye, Captain! Docking.");
        drydock(event);
        sleep(1);
      else
        foreach person in (boat.mobiles)
          if (event.source == person)
             handle_speech(event);
          endif  
        endforeach
      endif
    endif
  endif
  
endfunction

function CanCommandMe(who)
  owner := GetObjProperty(boat.tillerman, "owner");
  if(who.serial == owner)
    return 1;
  else
    var packkey;
    var lokid := GetObjProperty(boat.tillerman, "lockid");
    foreach thing in EnumerateItemsInContainer(who.backpack)
      if(GetObjProperty(thing, "lockid") == lokid)
        packkey := 1;
        break;
      endif
    endforeach
    if(packkey == 1)
      return 1;
    else
      return 0;
    endif
  endif
endfunction

function DoEncounter()
  foreach who in  ListMobilesNearLocationEx(boat.x, boat.y, GetMapInfo(boat.x, boat.y).z, 4, LISTEX_FLAG_GHOST)
    if(YesNo(who,"Resurrect?"))
      if (who in boat.mobiles)
        //PlaySoundEffect(who, SFX_SPELL_RESSURECTION);
        //PlaySoundEffect(who, SFX_SPELL_RESSURECTION);
        Resurrect(who);
      endif
    endif
  endforeach
  var who :=(boat.mobiles);
  who := who[1];
  if(!who)
    return;
  endif
  var x;
  var y;
  var z;
  x := RandomInt(15)-5;
  y := RandomInt(15)-5;
  x := x + boat.x;
  y := y + boat.y;
  if(x > boat.x)
    x := x + 5;
  else
    x := x - 5;
  endif
  if(y > boat.y)
    y := y + 5;
  else
    y := y - 5;
  endif
  z := GetMapInfo(x, y).z;
  if(z >= who.z)
    return;
  endif
  var it := CreateNpcFromTemplate(getcritter(), x, y, z, 0);
  if(it)
    SetObjProperty(it,"killme",1);
  endif
  var ev := struct{};
  ev.+type := SYSEVENT_ENTEREDAREA;
  ev.+source := who;
  SendEvent(it, ev);
endfunction

function checkres()
  foreach who in  ListMobilesNearLocationEx(boat.x, boat.y, GetMapInfo(boat.x, boat.y).z, 4, LISTEX_FLAG_GHOST)
    if(who in boat.mobiles)
      if(YesNo(who,"Resurrect?"))
        //PlaySoundEffect(who, SFX_SPELL_RESSURECTION);
        //PlaySoundEffect(who, SFX_SPELL_RESSURECTION);
        Resurrect(who);
      endif
    endif
  endforeach
endfunction

function getcritter()
  case(RandomInt(9))
    0: return "walrus";
    1: return "walrus";
    2: return "walrus";
    3: return "walrus";
    4: return "alligator";
    5: return "alligator";
    6: return "waterelemental";
    7: return "seaserpent";
    8: return "airelemental";
  endcase
endfunction

function drydock(event)
  if(GetObjProperty(event.source, "#DryDocking"))
    SendSysMessage(event.source, "You are already doing something else.");
    return;
  endif
  SetObjProperty(event.source, "#DryDocking", 1);
  EraseObjProperty(event.source, "#DryDocking");
  var text := lower(event.text);
  if(!text["drydock"])
    EraseObjProperty(event.source, "#DryDocking");
    return;
  endif
  var me := event.source;
  var items := boat.items;
  var mobsondeck := boat.mobiles;

  if(len(items) > 0)
    PrintTextAbovePrivate(boat.tillerman, "Arrh, Captain!  You can't drydock the boat while items are on deck!", me);
    EraseObjProperty(me, "#DryDocking");
    return;
  endif
  items := EnumerateItemsInContainer(boat.hold);
  if(len(items) > 0)
    PrintTextAbovePrivate(boat.tillerman, "Arrh, we'd best clear out the items in the hold first, Captain!", me);
    EraseObjProperty(me, "#DryDocking");
    return;
  endif
  if(len(mobsondeck) > 0)
    PrintTextAbovePrivate(boat.tillerman, "Arrh, Captain!  You can't drydock the boat while people are on the deck!", me);
    EraseObjProperty(me, "#DryDocking");
    return;
  endif  
  if(CanDockMe(boat, me))
    if(!YesNo(me,"Drydock the ship?"))
      EraseObjProperty(me, "#DryDocking");
      return;
    endif
    var shiptype;
    case(boat.objtype)
      0x6040: shiptype := 0x6027;
      0x6041: shiptype := 0x6028;
      0x6042: shiptype := 0x6029;
      0x6043: shiptype := 0x602a;
      0x6044: shiptype := 0x602b;
      0x6045: shiptype := 0x602c;
    endcase
    if(!shiptype)
      SendSysMessage(me, "Your boat seems to be malfunctioning. Please page a GM.");
      return;
    endif
    var newboat := CreateItemInContainer(me.backpack, shiptype, 1);
    var key := KP_HasKeyForLock(me, boat.tillerman);
    if(key)
      DestroyItem(key);
    endif
    if(!newboat)
      SendSysMessage(me,"Could not create boat deed in your backpack!");
      EraseObjProperty(me, "#DryDocking");
      return;
    endif
    if(ReserveItem(newboat))
      newboat.graphic := 0x14f3;
      if(!boat.tillerman.name)
        newboat.name := "a toy boat";
      else
        newboat.name := boat.tillerman.name;
      endif
      if(!DestroyBoat(boat))
        DestroyItem(newboat);
      endif
    else
      DestroyItem(newboat);
    endif
  endif
  EraseObjProperty(me, "#DryDocking");
endfunction

function DestroyBoat(who)
  var res := DestroyMulti(boat);
  if(!res)
    return 0;
  endif
  return 1;
endfunction

function SmackEveryone()
  foreach mob in(boat.mobiles)
    ApplyDamage(mob,RandomInt(10));
    PerformAction(mob,0x14);
    PlaySoundEffect(mob,0x110);
  endforeach
endfunction

function PlayBoatSounds()
  var who := RandomInt(len(boat.mobiles)+1);
  var mobs :=(boat.mobiles);
  if(RandomInt(2) == 1)
    PlaySoundEffect(mobs[who],0x13);
  else
    PlaySoundEffect(mobs[who],0x14);
  endif
endfunction

function WorldWrap()
  var newx := boat.x;
  var newy := boat.y;
  if(boat.y <= 6)
    newy := 4088;
  elseif(boat.y >= 4089)
    newy := 6;
  endif
  if(boat.x <= 6)
    newx := 5096;
  elseif(boat.x >= 5097)
    newx := 6;
  endif
  var lockid := GetObjProperty(boat.hold, "lockid");
  var owner := GetObjProperty(boat.hold, "owner");
  var shiptype := boat.objtype;
  var shipfacing, created;
  case(tillerman.graphic)
    0x3e4e: shipfacing := CRMULTI_FACING_NORTH;
    0x3e55: shipfacing := CRMULTI_FACING_EAST;
    0x3e4b: shipfacing := CRMULTI_FACING_SOUTH;
    0x3e50: shipfacing := CRMULTI_FACING_WEST;
    default: shipfacing := "Error!";
  endcase
  if(shipfacing == "Error!")
    syslog( "[ERROR] [boat.src] Couldn't tell which way the ship was facing for the worldwrap!");
  endif    
  created := CreateMultiAtLocation( newx, newy, -5, shiptype, shipfacing);
  if(!created)
    syslog( "[ERROR] [boat.src] New ship couldn't be created for worldwrap!");
    return;
  endif
  var oldshiphold := boat.hold;
  var newshiphold := created.hold;
  foreach item in EnumerateItemsInContainer( oldshiphold )
    if(item.container == oldshiphold)
      MoveItemToContainer(item, newshiphold);
    endif
  endforeach
  foreach item in EnumerateItemsInContainer( oldshiphold )
    MoveItemToContainer(item, newshiphold);
  endforeach
  foreach mob in(boat.mobiles)
    MoveObjectToLocation(mob,(mob.x-boat.x)+created.x,(mob.y-boat.y)+created.y, -2, mob.realm,  MOVEOBJECT_FORCELOCATION );
  endforeach
  if(boat.has_offline_mobiles)
    foreach mob in(boat.offline_mobiles)
      MoveObjectToLocation(mob,(mob.x-boat.x)+created.x,(mob.y-boat.y)+created.y, -2,  mob.realm, MOVEOBJECT_FORCELOCATION );
    endforeach
  endif
  foreach mob in(boat.items)
    MoveObjectToLocation(mob,(mob.x-boat.x)+created.x,(mob.y-boat.y)+created.y, -2, mob.realm );
  endforeach
  var newtillerman := created.tillerman;
  newtillerman.name := tillerman.name;
  SetObjProperty( created.starboardplank, "lockid", lockid);
  SetObjProperty( created.portplank, "lockid", lockid);
  SetObjProperty( created.ship.starboardplank, "owner", owner );
  SetObjProperty( created.ship.portplank, "owner", owner );
  SetObjProperty( created.ship.starboardplank, "tillermanid", newtillerman.serial );
  SetObjProperty( created.ship.portplank, "tillermanid", newtillerman.serial );
  SetObjProperty( created.hold, "lockid", lockid);
  SetObjProperty( created.hold, "owner", owner);
  SetObjProperty( created.tillerman, "owner", owner);
  SetObjProperty( created.tillerman, "shipserial", created.serial);
  SetObjProperty( created.tillerman, "lockid", lockid);
  if(boat.starboardplank.locked == 1)
    created.starboardplank.locked := 1;
  endif
  if(boat.portplank.locked == 1)  
    created.portplank.locked := 1;
  endif
  if(boat.hold.locked == 1)
    created.hold.locked := 1;
  endif
  SetObjProperty( created.hold, "#relativedir", relative_direction);
  SetObjProperty( created.hold, "#speed", ms_delay_between_moves);
  created.tillerman.usescript := ":boat:tillerman";
  if(!DestroyMulti(boat))
    DestroyItem(boat.tillerman);
    syslog( "[ERROR] [boat.src] Old ship at " +(boat.x-1) +","+ boat.y +","+ boat.z + " couldn't be destroyed during worldwrap!");
  endif
endfunction

function CanDockMe(boat, who)
  if(GetObjProperty(boat.hold,"owner") == who.serial)
    return 1;
  else
    var packkey;
    var lokid := GetObjProperty(boat.tillerman, "lockid");
    foreach thing in EnumerateItemsInContainer(who.backpack)
      if(GetObjProperty(thing, "lockid") == lokid)
        packkey := 1;
        break;
      endif
    endforeach
    if(packkey == 1)
      return 1;
    else
      return 0;
    endif
  endif
endfunction

/*NEW MAP COURSE FUNCTIONS*/
//follows the current course
function BoatFollowCourse(boat)
	var startx, starty, destx, desty;
	var course, nextwaypoint;
	var newpoint, newfacing, prevfacing;
	
	course := GetObjProperty(boat.tillerman,"course");
	nextwaypoint := GetObjProperty(boat.tillerman,"nextwaypoint");
	startx := boat.x; 
	starty := boat.y;
	prevfacing := boat.facing;
	
	if( (course==error) || (nextwaypoint==error))
		return;
	endif
	
	destx := cint(course[nextwaypoint].x);
	desty := cint(course[nextwaypoint].y);
	
	//printtextabove(boat, " destx " + destx + " desty " + desty); 
	
	newpoint := lineBresenham(startx,starty,destx,desty);
	newfacing := GetNewFacing(startx,starty,newpoint[1],newpoint[2]);

	if(newfacing == error) //reached waypoint/end
		nextwaypoint := nextwaypoint + 1;
		first_move_toward_waypoint := 1; //so we turn toward next waypoint (includes next course follow if we're done with this one)
		if(nextwaypoint > course.size()) //done
			state := STATE_DRIFTING;
			EraseObjProperty(boat.tillerman, "course");
			PrintTextAbove(boat.tillerman,"Arr, chegamos ao nosso destino!");
			return;
		else
			SetObjProperty(boat.tillerman,"nextwaypoint",nextwaypoint);
		endif
		
	else

		if(first_move_toward_waypoint == 1)
			if( prevfacing != newfacing )
				TurnBoat(boat,Cint(DetermineTurnCode(boat,newfacing)) );
			endif
			first_move_toward_waypoint := 0;
		endif
		MoveBoat(boat,newfacing);
		
		if((startx == boat.x) &&(starty == boat.y)) //we didn't move. must be blocked
    		state := STATE_DRIFTING;
    		PrintTextAbove(tillerman, "Aaargh!  We've stopped!");
  		endif
  	endif
	
endfunction

//convert facing 0-7 to turn code 0-3
function DetermineTurnCode( boat, desired )

    var current := CInt(boat.facing / 2);
    desired := CInt(desired / 2);

	
    if ( desired < current ) 
    	desired := desired + 4; 
    endif
    return (desired - current);
endfunction
	
//returns the direction (x1,y1) lies from (x0,y0) in the range 0-7.
// returns error if the 2 points are equal.
function GetNewFacing(x0,y0,x1,y1)
	var dx, dy;
	var facing;
	dx := x1 - x0;
	dy := y1 - y0;
	
	case(dx)
		NEGONE: 
			case(dy)
				 NEGONE: facing := 7;
				 ZERO: facing := 6;
				 POSONE: facing := 5;
				 default: facing := error;
			endcase
		 ZERO:
		 	case(dy)
		 		 NEGONE: facing := 0;
		 		 ZERO: facing := error;
		 		 POSONE: facing := 4;
		 		 default: facing := error;
		    endcase
		 POSONE:
		 	case(dy)
		 		 NEGONE: facing := 1;
		 		 ZERO: facing := 2;
		 		 POSONE: facing := 3;
		 		 default: facing := error;
		 	endcase
		 default: facing := error;
	endcase
	
	return facing;
endfunction

//Bresenham's line drawing algorithm. determines a line between two waypoints.
function lineBresenham(x0, y0, x1, y1)
    var dy;
    dy := y1 - y0;
    var dx;
    dx := x1 - x0;
    var stepx, stepy;

    if (dy < 0)
      	dy := -dy;  
       	stepy := -1;
    else
      	stepy := 1;
    endif
        
    if (dx < 0) 
       	dx := -dx;
       	stepx := -1;
    else 
      	stepx := 1;
    endif
        
    dy := 2*dy;   
    dx := 2*dx;    

    if (dx > dy)
        var fraction;
        fraction := 2*dy - dx;
        while (x0 != x1)
        	if (fraction >= 0)
            	y0 := y0 + stepy;
                fraction := fraction - dx;
           	endif
            x0 := x0 + stepx;
            fraction := fraction + dy;
            return array{x0, y0};
        endwhile
    else
        var fraction;
        fraction := 2*dx - dy;
        while (y0 != y1)
            if (fraction >= 0)
                x0 := x0 + stepx;
                fraction := fraction - dy;
            endif
            y0 := y0 + stepy;
            fraction := fraction + dx;
            return array{x0, y0};
        endwhile
    endif
endfunction
/*END NEW MAP COURSE FUNCTIONS*/
