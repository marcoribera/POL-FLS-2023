use uo;
use os;
use util;

include ":brainAI:npcNerves";
include ":brainAI:npcCommands";
include ":brainAI:npcSounds";

program BrainNerve(params)
	var npc		:= params[1];
	var nerve_name	:= params[2];
	//var settings	:= params[3];
	//var scripts	:= params[4];
	params := 0; // Not needed anymore.

	// Shut down appropriate nerves.
	foreach nerve in (LoadNerves(npc))
		if ( nerve.flags & NF_CONTINUE_ON_SLEEP )
			continue;
		elseif ( _nerve_iter != nerve_name )
			StopNerve(npc, _nerve_iter);
		endif
		sleepms(2);
	endforeach

	var spawnpointSerial := GetObjProperty(npc, "spawnpoint");
	var spawnpoint := SystemFindObjectBySerial( spawnpointSerial);
	var spawnRange := Cint(GetObjProperty(spawnpoint, "Range"));
	while ( npc )
		npc.facing := RandomInt(8);
		if (spawnpoint != error)
			if ( Distance(npc, spawnpoint) > spawnRange)
				var dist := Distance(npc, spawnpoint) - spawnRange;
				dist := RandomInt(dist) +1;
				AI_Move(npc, spawnpoint, NEMOVE_TOWARD, NEMOVE_WALK, NOWAKE, dist);
			else
				AI_Wander(npc, NOWAKE);
			endif
		else
			AI_Wander(npc, NOWAKE);
		endif

		AI_ClearThoughts(npc, CLR_NERVE);
		
		Sleep(30+RandomInt(10));
	endwhile
endprogram
