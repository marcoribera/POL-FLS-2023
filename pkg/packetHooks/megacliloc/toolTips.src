/* $Id: toolTips.src 104 2006-05-25 22:14:15Z montuz $
 *	Description: AOS Tooltips. Starter script.
 *	This packet takes awhile to get used to.
 */

use uo;
use basic;
use cfgfile;

use os;

include ":spells:swordmage";
include ":attributes:attributes";
include ":charactercreation:habilidades";

include "include/client";
include "include/say";

const OFFSET_OBJECT_SERIAL   := 0x05;
const OFFSET_CLILOC_ID       := 0x0F;
const OFFSET_LENGTH_ID       := 0x13;
const OFFSET_UNICODE_TEXT    := 0x14;

function GetDmgStringDesc(elem, item)
	var dmg_mod := CInt(item.dmg_mod);
	var resultado := CSTR(elem.MinDam) + "-" + CSTR(elem.MaxDam);
	if (dmg_mod>0)
		resultado := resultado + " (+" + CSTR(dmg_mod) +")";
	elseif (dmg_mod<0)
		resultado := resultado + " (" + CSTR(dmg_mod) +")";
	endif
	return resultado;
	/*
	var avgdmg := cint(elem.MinDam + elem.MaxDam)/2;

	if(avgdmg >= 20)
		return "Letal";
	elseif(avgdmg >= 18)
		return "Muito";
	elseif(avgdmg >= 16)
		return "Bom";
	elseif(avgdmg >= 14)
		return "Mediano";
	elseif(avgdmg >= 12)
		return "Pouco";
	elseif(avgdmg >= 10)
		return "Pouquissimo ";
	else
		return "Inofensivo";
	endif
	*/

endfunction

function getQuality(num)

	if (num >= 1.1)
		return "Excepcional";
	elseif(num  > 0.8)
		return "Normal";
	else
		return "Baixa";
	endif

endfunction

function getCondition(item) //Durabilidade dos itens
	return CSTR(item.hp) + "/" + CSTR(item.maxhp);
	/*
	var c := cdbl(item.hp) / cdbl(item.maxhp);

	if (c > 0.9)
		return "Boa";
	elseif (c > 0.6)
		return "Pouco Danificada";
	elseif (c > 0.3)
		return "Bastante Danificada";
	else
		return "Quebradiça";
	endif
	*/
endfunction

function TranslateCritical(crit)
	if (crit == "damage3")
		return "Dano Triplo";
	elseif (crit == "damage2")
		return "Dano Duplo";
	elseif (crit == "armorignore")
		return "Ignorar Armadura";
	elseif ( crit == "stun")
		return "Ataque Atordoante";
	elseif (Crit == "bleed")
		return "Alvejar Ponto Vital";
	endif

endfunction


function GetCriticalInfo(entry)

	var criticals := GetconfigStringArray(entry, "CriticalHitScripts");

	var critstr := "";

	var str;
	foreach crit in criticals
		str := ParseScriptString(crit);
		critstr := critstr + TranslateCritical(lower(str)) + "<br>";
	endforeach

	return critstr;

endfunction

function TranslateHit(crit)
	if (crit == "antimountedhit")
		return "Anti-montaria";
	elseif (crit == "chargehit")
		return "Carga";
	elseif (crit == "concussionhit")
		return "Concussão";
	elseif ( crit == "freearmorhit")
		return "Movimento Livre";
	elseif (crit == "heighthit")
		return "Diferença de Altura";
	elseif ( crit == "QueimaRoupa")
		return "Tiro a Queima Roupa";
	elseif ( crit == "pushback")
		return "Golpe Esmagador";
	elseif ( crit == "passivedisarm")
		return "Disarme Passivo";
	endif
endfunction

function GetHitsInfo(entry)

	var criticals := GetconfigStringArray(entry, "HitScripts");

	var critstr := "";

	var str;
	foreach crit in criticals
		str := ParseScriptString(crit);
		critstr := critstr + TranslateHit(lower(str)) + "<br>";
	endforeach

	return critstr;

endfunction

function getTipoStringDesc(elem, item) //Exibe o tipo de arma
	if (item.isa(POLCLASS_WEAPON))
		return CStr(elem.TipoAtaque) + "<br>" + CSTR(elem.Attribute);
	elseif (item.isa(POLCLASS_ARMOR))
		var tipo;
		case (CStr(elem.TipoProtecao))
			"ArmaduraLeve": tipo := "Armadura Leve"; break;
			"ArmaduraMedia": tipo := "Armadura Media"; break;
			"ArmaduraPesada": tipo := "Armadura Pesada"; break;
			"EscudoLeve": tipo := "Escudo Leve"; break;
			"EscudoMedio": tipo := "Escudo Medio"; break;
			"EscudoPesado": tipo := "Escudo Pesado"; break;
		endcase
		return tipo;
	endif
endfunction


function getVelStringDesc(elem, item) //Velocidade da arma. Mostra diferença pra item base
	var speedI := Cint(item.speed_mod);
	var speedE := Cint(elem.Speed);
	if (speedI > 0)
		return CSTR(elem.speed) + " (+" + CSTR(speedI) + ")";
	elseif (speedI < 0)
		return CSTR(elem.speed) + " (" + CSTR(speedI) + ")";
	else
		return CSTR(elem.speed);
	endif
endfunction

function getParryBonus(elem, item)
	var parrybonusI := Cint(GetObjProperty(item, "parrybonus"));
	var parrybonusE := Cint(elem.parrybonus);
	var difer := Cint(parrybonusI - parrybonusE);
	if (parrybonusI > 0)
		return CSTR(parrybonusE) + " (+" + CSTR(parrybonusI) + ")";
	elseif (parrybonusI < 0)
		return CSTR(parrybonusE) + " (" + CSTR(parrybonusI) + ")";
	else
		return CSTR(parrybonusI);
	endif
endfunction

function getParryDelay(elem, item)
	var parrydelayI := Cint(GetObjProperty(item, "parrydelay_mod"));
	var parrydelayE := Cint(elem.parrydelay);

	if (parrydelayI > 0)
		return CSTR(parrydelayE) + " (-" + CSTR(parrydelayI) + ")";
	elseif (parrydelayI < 0)
		return CSTR(parrydelayE) + " (+" + CSTR(-parrydelayI) + ")";
	else
		return CSTR(parrydelayE);
	endif
endfunction

function getDexPenalty(elem, item)
	var DexPenaltyI := Cint(GetObjProperty(item, "penaltybonus"));
	var DexPenaltyE := Cint(elem.DexPenalty);

	if (DexPenaltyI > 0)
		return CSTR(DexPenaltyE) + " (-" + CSTR(DexPenaltyI) + ")";
	elseif (DexPenaltyI < 0)
		return CSTR(DexPenaltyE) + " (+" + CSTR(-DexPenaltyI) + ")";
	else
		return CSTR(DexPenaltyE);
	endif
endfunction

function ParseScriptString(crit)

	var str := "";
	var i := 1;

	while(crit[i] != "/")
		i := i + 1;
	endwhile
	i := i +1;
	while (crit[i])
		str := str + crit[i];
		i := i + 1;
	endwhile

	return str;

endfunction


program Install()

	 Print("INSTALLING: Outgoing Tooltip PH...");
	 return 1;

endprogram

exported function MegaCliloc( who, byref packet )
	var white := "<BASEFONT COLOR=#FFFFFF>";
	var red := "<BASEFONT COLOR=#FF0000>";
	var blue := "<BASEFONT COLOR=#0000FF>";
	var orange :=  "<BASEFONT COLOR=#FFA500>";

	var Object_Name;

	var xDesc; //Será utilizado para juntar as informações do tooltip do item
	var desc; //Salva o campo de descrição do item ou personagem

	//Encontra o objeto que terá o tooltip preenchido
	var item := SystemFindObjectBySerial(packet.GetInt32(OFFSET_OBJECT_SERIAL));

	if(item)
		packet.SetSize(15); //primeira parte do packet eh tamanho 15

		if (item.IsA(POLCLASS_MOBILE))
			//PREENCHE NOME DO MOBILE
			Object_Name := item.name;

			//Cor do nome dos NPC conforme skill de combate
			if (item.npctemplate)
				if (who.weapon.attribute != WRESTLING)
					if ( (AP_GetSkill(item, WRESTLING) + 10) > AP_GetSkill(who, who.weapon.attribute))
						Object_Name :=  "<BASEFONT COLOR=#CBA300>" + Object_Name;
					endif
				else
					var sk1 := AP_GetSkill(who, MELEECOMBAT1H);
					var sk2 := AP_GetSkill(who, MELEECOMBAT2H);
					var sk3 := AP_GetSkill(who, RANGEDCOMBAT);
					var maxsk := sk1;
					if (sk2 > maxsk)
						maxsk := sk2;
					endif
					if (sk3 > maxsk)
						maxsk := sk3;
					endif
					if (AP_GetSkill(item, WRESTLING)+10 > maxsk)
						Object_Name :=  "<BASEFONT COLOR=#CBA300>" + Object_Name;
					endif
				endif
			else
				//Caso em que tá desconhecido
				if(GetObjProperty(item, "realname"))
					Object_Name := orange + "Incognito";
				else

					//Verifica se o char já foi reconhecido por who
					var conhecidos := dictionary;
					if(GetObjProperty(who, "conhecidos"))

						var ID := Cstr(item.serial); //Salva o serial do personagem
						if(GetObjProperty(item, "disfarce"))
							ID := Cstr(GetObjProperty(item, "FakeID")); //Substitui o serial pelo falso quando o personagem observado está disfarçado
						endif

						conhecidos := GetObjProperty(who, "conhecidos"); //Lista de pessoas conhecidadas
						if(conhecidos.Exists(ID))
							Object_Name := conhecidos[ID];
						else
							Object_Name := "??????";
						endif
					else
						Object_Name := "??????";
					endif

					if(item.title_race)
						Object_Name := Object_Name + " [" + item.title_race + "]";
					endif
				endif
				if (who.cmdlevel > 1) //Staff consegue ver o nome e raça

					if(GetObjProperty(item, "disfarce"))
						Object_Name := Object_Name + " [" + GetObjProperty(item, "disfarce").aparencia;
					else
						Object_Name := Object_Name + " [" + item.name;
					endif

					var povo;
					if (GetObjProperty(item, "chardata"))
						povo := GetObjProperty(item, "chardata").povo;
					endif
					if (povo)
						Object_Name := Object_Name + " - " + povo;
					endif
					Object_Name := Object_Name + "]";
				endif
			endif
		elseif ( item.IsA(POLCLASS_ITEM) )
			Object_Name := item.desc;
		else
			Object_Name := item.name;
		endif

		//MONTA E ENVIA PACOTE COM ATUALIZAÇÃO DO NOME DO ITEM
		Object_Name := CAscZ(Object_Name);
		packet.SetInt32(OFFSET_CLILOC_ID, 1042971);
		packet.SetUnicodeString(OFFSET_UNICODE_TEXT, Object_Name, 1);
		packet.SetInt16(OFFSET_LENGTH_ID, Object_Name.Size() * 2);
		// I've noticed that this packet is only sent if this value has changed
		// from the last time it was checked. And using html to change the size doesn't work
		// for some reason. Maybe a core/client issue?

		//PREENCHE A DESCRIÇÃO COMUM A QUALQUER ITEM OU MOBILE
		xDesc := "";
		desc := GetObjProperty(item, "description");

		//EXIBE SE TEM PROPRIEDADE MAGICA
		if (GetObjProperty(item,"magic"))
			xDesc := xDesc + blue + "Mâgico<br>";
		endif

		var descmods := GetObjProperty(item, "descmod");

		//JUNTA AS DESCRIÇÕES DO DOS PROPS DO PERSONAGEM
		if((descmods!=error) && (desc == error))
			 desc := descmods;
		endif

		if(descmods != error)
			foreach descmod in descmods
				desc:=desc + descmod ;
			endforeach
		endif

		//LIMITA O TAMANHO DAS DESCRIÇÕES
		if (len(desc) > 85)
			desc := desc[1, 85];
		endif

		//VERIFICA PROPRIEDADES DE IDIOMAS
		if (desc!=error)
			var linguagem := GetObjProperty(item, "lingua");
			if (linguagem!=error)
				//var linguas := GetObjProperty(who, "linguas");
				//if (linguagem in linguas)
				if (temHabilidade(who, "Arqueologo") || temHabilidade(who, "Formacao Academica"))
					xDesc := xDesc + white + "" + desc + "<BR>";
				else
					xDesc :=  xDesc + "*Inscrições em Língua Desconhecida*<BR>";
				endif
			else
				xDesc := xDesc + white + "" + desc + "<BR>";
			endif
		endif

		//ADICIONA DESCRIÇÕES DAS PROPRIEDADES COMUNDS DE ARMAS E ARMADURAS
		if (item.isA(POLCLASS_WEAPON) || item.isA(POLCLASS_ARMOR))
			var cfg := ReadConfigFile(":*:itemdesc");
			var elem := FindConfigElem(cfg, item.objtype);
			if (item.quality >= 1.1)
				xDesc := xDesc + white + "Excepcional ["+Cstr(item.quality)+"]<br>";
			endif

			var cond := GetCondition(item);
			xDesc := xDesc + "HP: " + GetCondition(item) + "<br>";

			if (item.isA(POLCLASS_WEAPON))
				xDesc := xDesc + "Min Str: " + elem.strrequired + "<br>";
				xDesc := xDesc + "Dano: " + GetDmgStringDesc(elem,  item) + "<br>";
				xDesc := xDesc + "Velocidade: " + GetVelStringDesc(elem, item) + "<br>";
				xDesc := xDesc + GetTipoStringDesc(elem, item) + "<br>";
				var crits := GetCriticalInfo(elem);
				if (crits != "")
					xDesc := xDesc + red + crits;
				endif

				var hits :=  GetHitsInfo(elem);
				if (hits != "")
					xDesc := xDesc + orange + hits;
				endif

				xDesc := xDesc + white + "Fisico " + (item.damage_physical ) + "<br>";
				if ( (item.damage_cold + item.damage_cold_mod != 0))
					xDesc := xDesc  + "Frio " + (item.damage_cold ) + "<br>";
				endif
				if ( (item.damage_fire + item.damage_fire_mod != 0))
					xDesc := xDesc  + "Fogo " + (item.damage_fire ) + "<br>";
				endif
				if ( (item.damage_energy + item.damage_mod != 0))
					xDesc := xDesc  + "Energia " + (item.damage_energy ) + "<br>";
				endif
				if ( (item.damage_poison + item.damage_poison_mod != 0))
					xDesc := xDesc  + "Veneno " + (item.damage_poison ) + "<br>";
				endif

				//EXIBE AS GEMAS QUE TEM NA ARMA
				if ( getObjProperty(item, "swordmage") == who.serial)
					var gems := getobjproperty(item, "gems");
					foreach gem in (gems.keys())
						xDesc := xDesc + white + gem + " - "+ getSwordSpellName(gems[gem].id) + "<br>";
					endforeach
				endif
				if (item.dmg_mod > 0 )
					xDesc := xDesc + blue + "Bônus Dano";
				endif
				if (item.hp_mod > 0)
					xDesc := xDesc + blue + "Bônus Item PVs";
				endif

				var hitsscripts := GetObjProperty(item, "HitScripts");
				if (hitsscripts != error)
					foreach hits in hitsscripts
						if (hits == ":combat:weaponHitScripts/FireHit")
							xDesc := xDesc + blue + "Dano de Fogo<br>";
						elseif ( hits == ":combat:weaponHitScripts/IceHit")
							xDesc := xDesc + blue + "Dano de Gelo<br>";
						elseif ( hits == ":combat:weaponHitScripts/LightningHit")
							xDesc := xDesc + blue + "Dano de Energia<br>";
						endif
					endforeach
				endif

				if (GetObjProperty(item, "swordmage") != error)
					xDesc := xDesc + white + GetObjProperty(item, "swordmage") + "<br>";
				endif
			elseif (item.isA(POLCLASS_ARMOR))
				if (cint(elem.strrequired) > 0)
					xDesc := xDesc + "Min Str: " + elem.strrequired + "<br>";
				endif
				if (elem.DexPenalty || GetObjProperty(item, "penaltybonus"))
					xDesc := xDesc + "Redutor Dex : " + getDexPenalty(elem, item) + "<br>";
				endif
				if (elem.parrybonus || GetObjProperty(item, "parrybonus"))
					xDesc := xDesc + "Block Bonus: " + getParryBonus(elem, item) + "<br>";
				endif
				if (elem.parrydelay || GetObjProperty(item, "parrydelay_mod"))
					xDesc := xDesc + "Delay Bonus: " + getParryDelay(elem, item) + "<br>";
				endif
				xDesc := xDesc + white + "Fisico " + (item.resist_physical ) + "<br>";
				if ( (item.resist_cold + item.resist_cold_mod != 0))
					xDesc := xDesc  + "Frio " + (item.resist_cold ) + "<br>";
				endif
				if ( (item.resist_fire + item.resist_fire_mod != 0))
					xDesc := xDesc  + "Fogo " + (item.resist_fire ) + "<br>";
				endif
				if ( (item.resist_energy + item.resist_mod != 0))
					xDesc := xDesc  + "Energia " + (item.resist_energy ) + "<br>";
				endif
				if ( (item.resist_poison + item.resist_poison_mod != 0))
					xDesc := xDesc  + "Veneno " + (item.resist_poison ) + "<br>";
				endif
			endif
		endif

		var pplmage := GetObjProperty(item, "magicwho"); //magic lore
		if ( pplmage != error)
			if (who.serial in pplmage)
				if (GetObjProperty(item, "pocaoname"))
					xDesc := xDesc + white + GetObjProperty(item, "pocaoname");
				endif
				var mods := GetObjProperty(item, "equip");
				if (mods != error)
					foreach mod in (mods.keys())
						if (mod == "strmod")
							xDesc := xDesc + blue + "Bônus For <br>";
						elseif (mod == "dexmod")
							xDesc := xDesc + blue + "Bônus Des <br>";
						elseif (mod == "intmod")
							xDesc := xDesc + blue + "Bônus Int <br>";
						elseif (mod == "hitsmod")
							xDesc := xDesc + blue + "Bônus PVs<br>";
						elseif (mod == "manamod")
							xDesc := xDesc + blue + "Bônus Mana <br>";
						elseif (mod == "stammod")
							xDesc := xDesc + blue + "Bônus Stam <br>";
						elseif (mod == "PhysicalResistMod")
							xDesc := xDesc + blue + "Resistencia Fisica <br>";
						elseif (mod == "ColdResistMod")
							xDesc := xDesc + blue + "Resistencia Frio <br>";
						elseif (mod == "FireResistMod")
							xDesc := xDesc + blue + "Resistencia Fogo <br>";
						elseif (mod == "EnergyResistMod")
							xDesc := xDesc + blue + "Resistencia Energia <br>";
						elseif (mod == "PoisonResistMod")
							xDesc := xDesc + blue + "Resistencia Veneno <br>";
						else
							xDesc := xDesc + blue + "Bonus " + mod + "<br>";
						endif
					endforeach
				endif
			endif
		endif

		//MONTA E ENVIA PACOTE COM ATUALIZAÇÃO DAS DESCRIÇÕES
		xDesc := CAscZ(xDesc);

		if ( xDesc.Size() > 0 )
			// Cliloc ID if these two ID's match it'll only show one line.
			packet.SetInt32(packet.GetSize() - 1, 1070722);

			// Get the offset of where the next text size
			var Length_ID := packet.GetSize();
			packet.SetUnicodeString(packet.GetSize() + 1, xDesc, 1);

			// SetUnicodeString adds 00 BYTE[1] at the start of the Unicode offset, which messes with the length offset.
			// Setting the length of the unicode text below will fix that issue. Same deal as above.
			packet.SetInt16(Length_ID, xDesc.Size() * 2);
		endif

		// End of loop.
		packet.SetInt32(packet.GetSize(), 0);
	endif

	return 0;

endfunction