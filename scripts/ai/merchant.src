///////////////////////////////////////////////////////////////////////
// This is a description of how these variables are used.
//
// shop_sell = vendor inventory.
// shop_sell also sent when staff asks "showinventory".
//
// shop_resale = restock. sent when staff asks "showrestock".
// shop_resale also has a CProp, "MyGold".
// SendOpenSpecialContainer(ev.source, shop_resale);
//
// shop_buy = sent with "buy" window.
// function prototype:
// SendBuyWindow( character, container, vendor, items, flags := 0 )
// SendBuyWindow(ev.source, shop_sell, me, shop_buy);
//
// shop_resale = sent with "sell" window.
// function prototype:
// SendSellWindow( character, vendor, i1, i2, i3, flags := 0 )
// i1 = "for sale" item container.
// i2 = vendor's "Bought from player" item container.
// i3 = vendor's "Buyable" item container.
// SendSellWindow(ev.source, me, shop_sell, shop_buy, shop_resale);
///////////////////////////////////////////////////////////////////////
use npc;
use os;
use uo;

include "include/eventID";
include "include/sysEvent";
include ":npcs:randName";
include "include/utility";
include "include/mrcSpawn";
include ":npcs:garment";
include "include/client";
include "include/anchors";
include "include/findCity";
include "include/begging";
include ":attributes:attributes";
include ":containers:storageAreas";
include ":npcs:trainSkill";
include "include/objtype";

const MAX_SKILLS      := 48;

var me := Self();
me.hidden := 1;
var shop_sell, shop_resale, shop_buy;
var merchant_type := GetObjProperty(me,"MerchantType");
var equipt        := GetObjProperty(me, "Equipt");
var npccfg        := ReadConfigFile("npcdesc");

set_priority(50);

program merchant()
  if(!merchant_type)
    SetObjProperty(me, "MerchantType", "Mage");
    merchant_type := "Mage";
  endif
  start_script("NPCKeeper", me);
  var myanchor := GetObjProperty(me, "Anchor");
  if(myanchor)
    MoveObjectToLocation(me, myanchor[1], myanchor[2], myanchor[3], me.realm, MOVEOBJECT_FORCELOCATION);
  endif
  drop_anchor();
  myanchor     := GetObjProperty(me, "Anchor");
  var spawnname := merchant_type + " " + myanchor[1] + " " + myanchor[2] + " " + myanchor[3];
  shop_sell := CP_GetStorageAreaContainer( spawnname+" ShopSell", CP_MERCHANT_AREA, CP_NOCREATE );
  shop_resale := CP_GetStorageAreaContainer( spawnname+" ShopeResale", CP_MERCHANT_AREA, CP_NOCREATE );
  shop_buy := CP_GetStorageAreaContainer( spawnname+" ShopBuy", CP_MERCHANT_AREA, CP_NOCREATE );
  while((!shop_sell) || (!shop_resale) || (!shop_buy))
    sleep(5);
    shop_sell := CP_GetStorageAreaContainer( spawnname+" ShopSell", CP_MERCHANT_AREA, CP_NOCREATE );
    shop_resale := CP_GetStorageAreaContainer( spawnname+" ShopeResale", CP_MERCHANT_AREA, CP_NOCREATE );
    shop_buy := CP_GetStorageAreaContainer( spawnname+" ShopBuy", CP_MERCHANT_AREA, CP_NOCREATE );
  endwhile
  me.hidden := 0;
  EnableEvents(SYSEVENT_ITEM_GIVEN);
  DisableEvents(SYSEVENT_SPEECH);
  if(GetObjProperty(me, "frozen"))
    me.frozen := 1;
  endif
  var next_wander := ReadGameClock() + 10;
  const loops := 0;
  while (1)
    var ev;
    ev := os::wait_for_event(120);
    if(ev)
      case (ev.type)
        EVID_NODE:                var txt := lower(ev.text);
                                  if((ev.source.cmdlevel > 2) && (txt["showinventory"]))
                                    SendOpenSpecialContainer(ev.source, shop_sell);
                                  elseif((ev.source.cmdlevel > 2) && (txt["showrestock"]))
                                    SendOpenSpecialContainer(ev.source, shop_resale);
                                  else
                                    if(txt["buy"])
                                      TurnToward(ev.source);
                                      var res := SendBuyWindow( ev.source, shop_sell, me, shop_buy, VENDOR_SEND_AOS_TOOLTIP );
									  res := res;
                                    elseif(txt["sell"])
                                      if(GetObjProperty(shop_resale, "MyGold") >= 1000)
                                        TurnToward(ev.source);
                                        var count := ModifyPCSellList(merchant_type, (ev.source));
                                        if(count >= 1)
                                          var res := SendSellWindow( ev.source, Self(), shop_sell, shop_buy, shop_resale, VENDOR_SEND_AOS_TOOLTIP );
										  res := res;
                                        else
                                          PrintTextAbovePrivate(me, "You dont have anything I would be interested in.", ev.source);
                                        endif
                                      else
                                        PrintTextAbovePrivate(me, "I cannot afford any more of that", ev.source );
                                      endif
                                    elseif (txt ["job"])
                                        var parms := { };
                                        parms[1] := ev.source;
                                        parms[2] := me;
                                        start_script (":job:job", parms);
                                    elseif (txt["sell all"])
                                            BuyAll(ev.source);
                                    elseif (txt["sell bag"])
                                            BuyBag(ev.source);
                                    elseif((txt["vendor train"]) || (txt["vendor teach"]) || (txt["merchant train"]) || (txt["merchant teach"]))
                                      TurnToward(ev.source);
                                      MerchantTrain(me, ev.source, ev.text);
                                    endif
                                  endif
        SYSEVENT_MERCHANT_BOUGHT: TurnToward(ev.source);
                                  PrintTextAbovePrivate(me, "The total of thy sale is " + ev.amount, ev.source);
                                  if(lower(merchant_type) != "appraiser")
                                    var mygold := GetObjProperty(shop_resale, "MyGold");
                                    mygold := mygold - ev.amount;
                                    SetObjProperty(shop_resale, "MyGold", mygold);
                                  endif
                                  foreach thing in EnumerateItemsInContainer(shop_buy)
                                    if(MoveItemToContainer(thing, shop_sell))
                                      SetObjProperty(thing,"ClearRestock", (ReadGameClock() + 1800));
                                    else
                                      DestroyItem(thing);
                                    endif
                                  endforeach
                                  PlaySoundEffect(me, 0x38);
        SYSEVENT_MERCHANT_SOLD:   TurnToward(ev.source);
                                  PrintTextAbovePrivate(me, "The total of thy purchase is " + ev.amount, ev.source);
                                  foreach thing in EnumerateItemsInContainer((ev.source).backpack, ENUMERATE_ROOT_ONLY)
                                    EraseObjProperty(thing, "ClearRestock");
                                  endforeach
                                  if( Lower( merchant_type ) != "appraiser" )
                                    var mygold := GetObjProperty(shop_resale, "MyGold");
                                    mygold := mygold + ev.amount;
                                    SetObjProperty(shop_resale, "MyGold", mygold);
                                  endif
                                  PlaySoundEffect(me, 0x38);
        SYSEVENT_ITEM_GIVEN:    TurnToward (ev.source);
                                if ( GetObjProperty( ev.item, "merchant") )
                                        PayForJobCompleted ( ev );
                                elseif ( ev.item.objtype == UOBJ_GOLD_COIN )
                                        TrainSkill(me, ev.source, ev.item);
                                endif

      endcase
    endif
	if(ReadGameClock() >= next_wander)
	  begpurse(me);
      wander();
      if(CoordinateDistance(me.x, me.y, myanchor[1], myanchor[2]) > 5)
        MoveObjectToLocation(me, myanchor[1], myanchor[2], myanchor[3], me.realm, MOVEOBJECT_FORCELOCATION);
      endif
      next_wander := ReadGameClock() + 30;
    endif
  endwhile
endprogram

function Lookiehere(who, npc)
  var ev;
  ev := array;
  ev.+ type;
  ev.+ source;
  ev.type := SYSEVENT_SPEECH;
  ev.text := "node";
  ev.source := npc;
  foreach thing in ListItemsNearLocationOfType(who.x, who.y, who.z, 15, 0x1887b, who.realm)
    SendEvent(thing, ev);
  endforeach
endfunction

///////////////////
//  called when someone hands in a job bag
// Added by Yukiko 04-Oct-2006 from Sanc scripts.
///////////////////
function PayForJobCompleted (byref ev)
	var bag := ev.item;
	var player := ev.source;

	if (GetObjProperty (bag, "merchant") != me.serial)
		say("I didn't ask for that.");
		return;
	endif

	var endtime := GetObjProperty (bag, "endtime");
	if ( ReadGameClock() > endtime )
		say("You didn't complete this order in time.");
		DestroyItem (bag);
		return;
	endif

	var count := 0;
	foreach item in EnumerateItemsInContainer (bag)
		if (GetObjProperty(item, "job") == bag.serial)
			count := count + 1;
		endif
	endforeach

	if (!count)
		say ("Just what are you trying to pull?");
		return;
	endif

	var jobattribute := AP_SkillIdToAttributeName (GetObjProperty (bag, "jobtype"));

	var goldamount := count * CINT(GetAttribute (player, jobattribute)/5);
	if (!goldamount)
		goldamount := count;
		say("This is some crappy workmanship.  I'll only pay " + goldamount + " gold for this.");
	else
		say("Good job! Here is your " + goldamount + " gold.");
	endif

	CreateItemInContainer (player.backpack, UOBJ_GOLD_COIN, goldamount);
	PlaySoundEffect (me, 0x38);
	DestroyItem (bag);

	var playerjobs := GetGlobalProperty ("#jobs_for_account_"+player.acctname);
	if (!playerjobs)
		playerjobs := dictionary;
	endif
	playerjobs.insert (ReadGameClock(), goldamount);
	SetGlobalProperty ("#jobs_for_account_"+player.acctname, playerjobs);
endfunction

///////////////////
//  called by 'sell bag'
///////////////////
function BuyBag (byref you)
	PrintTextAbovePrivate ( me, "What bag of stuff would you like to sell me?", you );
	var bag := Target (you);
	if (!bag)
		PrintTextAbovePrivate (me, "OK, never mind then.", you);
		return;
	endif

	if (!bag.isa (POLCLASS_CONTAINER))
		PrintTextAbovePrivate (me, "But that's not even a bag!", you);
		return;
	endif

	if (bag != you.backpack)
		if (!InInventory (you.backpack, bag) )
			PrintTextAbovePrivate (me, "That bag isn't in your inventory.", you);
			return;
		endif
	endif

	if (!len (EnumerateItemsInContainer (bag)))
		PrintTextAbovePrivate (me, "But that bag is empty!", you);
		return;
	endif

	var elem, itemprice, itemamount;
	var itemdesc := ReadConfigFile (":*:itemdesc");
	var totalsale := 0;

	foreach item in EnumerateItemsInContainer(bag, ENUMERATE_ROOT_ONLY)
		if (IsBuyableItem (you, item, 1) )
			elem := FindConfigElem (itemdesc, item.objtype);
			if (elem)
				itemprice := GetConfigInt (elem, "vendorbuysfor");
				itemamount := item.amount;
				if (itemprice and itemamount)
					if (totalsale + (itemprice * itemamount) < 50000)
						totalsale := totalsale + (itemprice * itemamount);
						if( !ReserveItem( item ) )
							SysLog( "Reserved item sale!"
									+ " Acct: " + you.acctname
									+ " Serial: " + you.serial
									+ " Item: " + item.objtype
									+ " Gold: " + itemprice );
						endif
						DestroyItem (item);
						sleepms (100);
					else
						break;
					endif

					if (totalsale > 50000)
						break;
					endif
				endif
			endif
		endif
	endforeach

	if (totalsale)
		PrintTextAbovePrivate (me, "The total of your sale is " + totalsale, you );
		CreateItemInContainer (you.backpack, UOBJ_GOLD_COIN, totalsale);
		PlaySoundEffect (me, 0x38);
	else
		PrintTextAbovePrivate (me, "I'm afraid I don't want any of those items.", you);
	endif
endfunction

///////////////////
//  called by 'sell all'
///////////////////
function BuyAll (byref you)

	PrintTextAbovePrivate (me, "What would you like me to buy all of?", you );
	var items := Target (you);
	if ( !items or !Accessible (you, items) )
		PrintTextAbovePrivate (me, "OK, never mind them.", you);
		return;
	endif

	var itemdesc := ReadConfigFile (":*:itemdesc");
	var elem := FindConfigElem (itemdesc, items.objtype);
	if (!elem)
		PrintTextAbovePrivate (me, "Sorry, but I don't want that.", you);
		return;
	endif

	var itemprice := GetConfigInt (elem, "vendorbuysfor");
	//crude hack because the sell window can't handle prices > 60000
	if (!itemprice)
		itemprice := GetConfigInt (elem, "BuyPrice");
	endif

	if (!itemprice)
		PrintTextAbovePrivate (me, "Sorry, but I don't want that.", you);
		return;
	endif

	if ( itemprice > 30000 )
		if (!ReserveItem(items))
			return;
		endif
		say("Ooh, an expensive one!");
		while (itemprice > 60000)
			CreateItemInContainer (you.backpack, "goldcoin", 60000);
			itemprice := itemprice - 60000;
		endwhile
		CreateItemInContainer (you.backpack, "goldcoin", itemprice);
		DestroyItem (items);
		return;
	endif

	var thecolor := items.color;
	var totalsale := 0;
	var itemamount := 0;

	foreach item in ( FindSubstance( items.container, items.objtype, 1, 0, FINDSUBSTANCE_ROOT_ONLY+FINDSUBSTANCE_FIND_ALL ) )
		if ( item.color == thecolor and IsBuyableItem (you, item, 0) )
			itemamount := item.amount;
			if (totalsale + (itemprice * itemamount) < 50000)
				totalsale := totalsale + (itemprice * itemamount);
				DestroyItem (item);
				sleepms (100);
			else
				break;
			endif

			if (totalsale > 50000)
				break;
			endif
		endif
	endforeach

	if (totalsale)
		PrintTextAbovePrivate (me, "The total of your sale is " + totalsale, you );
		CreateItemInContainer (you.backpack, UOBJ_GOLD_COIN, totalsale);
		PlaySoundEffect (me, 0x38);
	else
		PrintTextAbovePrivate (me, "I'm afraid I don't want that.", you);
	endif
endfunction

///////////////////
//  determines if the item is one that can be bought when using 'sell bag', 'sell all', or one of
//  other others
///////////////////
function IsBuyableItem (byref character, byref item, byref from_bag)
	if ( item.newbie )
		return 0;
	elseif (IsContainer (item) )
		return 0;
//	elseif (IsMagicalItem (item) )
//		say ("Ooh, " + item.desc);
//		return 0;
	elseif (GetObjProperty (item, "questitem") )
		Say ("Ooh, this looks important.");
		return 0;
	elseif (GetObjProperty (item, "ownerserial") )
		Say (item.desc + " is marked!");
		return 0;
	elseif (GetObjProperty (item, "slave") )
		Say (item.desc + " is marked!");
		return 0;
	elseif (item.buyprice and item.buyprice < 0)
		return 0;
	endif

	if (!from_bag)
		if (item.objtype == UOBJ_GOLD_COIN)
			return 0;
		endif

		return 1;
	endif

	var account := character.acct;
	if (!account)
		return;
	endif

	var sell_options := account.GetProp ("sell_options");
	if (!sell_options)
		sell_options := {0, 0, 0};
	endif

	case (item.objtype)
		UOBJ_GOLD_COIN:
			return 0;

		UOBJ_GEM_AMBER:
		UOBJ_GEM_STAR_SAPPHIRE:
		UOBJ_GEM_EMERALD:
		UOBJ_GEM_SAPPHIRE:
		UOBJ_GEM_RUBY:
		UOBJ_GEM_CITRINE:
		UOBJ_GEM_AMETHYST:
		UOBJ_GEM_TOURMALINE:
		UOBJ_GEM_DIAMOND:
			return sell_options[1];

		UOBJ_BLACK_PEARL:
		UOBJ_BLOOD_MOSS:
		UOBJ_GARLIC:
		UOBJ_GINSENG:
		UOBJ_MANDRAKE_ROOT:
		UOBJ_NIGHTSHADE:
		UOBJ_SULFUROUS_ASH:
		UOBJ_SPIDER_SILK:
			return sell_options[2];

		UOBJ_FEATHER:
		UOBJ_HIDE:
		UOBJ_LOG:
		0x0DF2:	//wand
		0x0DF3:	//wand
		0x0DF4:	//wand
		0x0DF5:	//wand
			return sell_options[3];
	endcase

	return 1;
endfunction



